version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@4.0.1
  aws-eks: circleci/aws-eks@0.2.1
  kubernetes: circleci/kubernetes@0.7.0
  helm: circleci/helm@1.1.2

commands:
  checkout_and_decrypt:
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install git-crypt
      - run: echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
      - run: git-crypt unlock git-crypt.key

jobs:
  test:
    docker:
      - image: circleci/ruby:2.7.2
        environment:
          DATABASE_URL: postgres://postgres@localhost/laa_court_data_adaptor_test
          RAILS_ENV: test
      - image: circleci/postgres:11.5-alpine
        environment:
          POSTGRES_DB: laa_court_data_adaptor_test
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install bundle
          command: |
            gem install bundler -N

      - run:
          name: install dependencies
          command: |
            bundle check --path vendor/bundle || bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client

      - run:
          name: Database Setup
          command: |
            bundle exec rake db:migrate

      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: run rubocop
          command: bundle exec rubocop

  install_on_dev:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubeconfig:
          kubeconfig: ENCODED_KUBECONFIG_DEV
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-dev
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/dev/values-dev.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_test:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubeconfig:
          kubeconfig: ENCODED_KUBECONFIG_TEST
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-test
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/test/values-test.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_uat:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubeconfig:
          kubeconfig: ENCODED_KUBECONFIG_UAT
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-uat
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/uat/values-uat.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_stage:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubeconfig:
          kubeconfig: ENCODED_KUBECONFIG_STAGE
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-stage
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/stage/values-stage.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_prod:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubeconfig:
          kubeconfig: ENCODED_KUBECONFIG_PROD
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-prod
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/prod/values-prod.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

workflows:
  version: 2
  test-build-deploy-master:
    jobs:
      - test:
          filters:
            branches:
              only:
                - master
      - aws-ecr/build_and_push_image:
          requires:
            - test
          repo: laa-crime-apps-team/laa-court-data-adaptor
          tag: "${CIRCLE_SHA1}"
      - install_on_dev:
          requires:
          - aws-ecr/build_and_push_image
      - hold_install_on_test:
          type: approval
          requires:
          - install_on_dev
      - install_on_test:
          requires:
          - hold_install_on_test
      - hold_install_on_uat:
          type: approval
          requires:
          - install_on_test
      - install_on_uat:
          requires:
          - hold_install_on_uat
      - hold_install_on_stage:
          type: approval
          requires:
          - install_on_uat
      - install_on_stage:
          requires:
          - hold_install_on_stage
      - hold_install_on_prod:
          type: approval
          requires:
          - install_on_stage
      - install_on_prod:
          requires:
          - hold_install_on_prod
