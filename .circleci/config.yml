version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.2
  aws-eks: circleci/aws-eks@0.2.1
  kubernetes: circleci/kubernetes@0.7.0
  helm: circleci/helm@1.1.2

commands:
  checkout_and_decrypt:
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install git-crypt
      - run: echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
      - run: git-crypt unlock git-crypt.key

jobs:
  test:
    docker:
      - image: cimg/ruby:2.7.5
        environment:
          PAGER: cat
          DATABASE_URL: postgres://postgres@localhost/laa_court_data_adaptor_test
          RAILS_ENV: test
      - image: cimg/postgres:11.12
        environment:
          POSTGRES_DB: laa_court_data_adaptor_test
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install bundle
          command: |
            sudo gem install bundler -N

      - run:
          name: install dependencies
          command: |
            bundle check || bundle install --jobs=4 --retry=3

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client

      - run:
          name: Database Setup
          command: |
            bundle exec rake db:migrate

      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: run rubocop
          command: bundle exec rubocop

  build-and-push-app:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          repo: laa-crime-apps-team/laa-court-data-adaptor
          tag: "${CIRCLE_SHA1}"
          extra-build-args: |
            --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
            --build-arg COMMIT_ID=${CIRCLE_SHA1} \
            --build-arg BUILD_TAG=${CIRCLE_SHA1} \
            --build-arg APP_BRANCH=${CIRCLE_BRANCH} \

  install_on_dev_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_DEV_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-dev
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-dev get pods
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-dev
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/live/dev/values-dev.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_test_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_TEST_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-test
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-test get pods
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-test
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/live/test/values-test.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_stage_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_STAGE_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-stage
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-stage get pods
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-stage
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/live/stage/values-stage.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_uat_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_UAT_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-uat
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-uat get pods
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-uat
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/live/uat/values-uat.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_prod_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_PROD_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-prod
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-prod get pods
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-prod
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/live/prod/values-prod.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

workflows:
  version: 2
  test-build-deploy-master-to-live-cluster:
    jobs:
      - test:
          filters:
            branches:
              only:
                - master
      - build-and-push-app:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - hold_install_on_dev:
          type: approval
          requires:
          - build-and-push-app
      - install_on_dev_live:
          requires:
            - hold_install_on_dev
      - hold_install_on_test:
          type: approval
          requires:
          - build-and-push-app
      - install_on_test_live:
          requires:
          - hold_install_on_test
      - hold_install_on_uat:
          type: approval
          requires:
          - build-and-push-app
      - install_on_uat_live:
          requires:
          - hold_install_on_uat
      - hold_install_on_stage:
          type: approval
          requires:
          - build-and-push-app
      - install_on_stage_live:
          requires:
          - hold_install_on_stage
      - install_on_prod_live:
          requires:
          - build-and-push-app

  test-branch:
    jobs:
      - test:
        filters:
          branches:
            ignore:
              - master

  build-deploy-branch-to-live-cluster:
    jobs:
      - branch-build-approval:
          type: approval
          filters:
            branches:
              ignore:
                - master
      - build-and-push-app:
          requires:
            - branch-build-approval
      - hold_install_on_dev:
          type: approval
          requires:
          - build-and-push-app
      - install_on_dev_live:
          requires:
          - hold_install_on_dev
      - hold_install_on_test:
          type: approval
          requires:
          - build-and-push-app
      - install_on_test_live:
          requires:
          - hold_install_on_test
      - hold_install_on_stage:
          type: approval
          requires:
          - build-and-push-app
      - install_on_stage_live:
          requires:
          - hold_install_on_stage
      - hold_install_on_uat:
          type: approval
          requires:
          - build-and-push-app
      - install_on_uat_live:
          requires:
          - hold_install_on_uat
