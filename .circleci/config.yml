version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@9.0.2
  aws-eks: circleci/aws-eks@0.2.1
  kubernetes: circleci/kubernetes@0.7.0
  helm: circleci/helm@1.1.2
  newman: postman/newman@0.0.2
  snyk: snyk/snyk@2.2.0

executors:
  newman-latest:
    docker:
      - image: postman/newman:latest
  snyk-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/ruby:3.4.4-browsers
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/cda_test
          TZ: Europe/London
      - image: cimg/postgres:17.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "circleci"
          POSTGRES_DB: cda_test

commands:
  checkout_and_decrypt:
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install git-crypt
      - run: echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
      - run: git-crypt unlock git-crypt.key

  build-temp-image:
    steps:
      - run:
          name: Compile Docker Image
          command: |
            docker build \
              --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg COMMIT_ID=${CIRCLE_SHA1} \
              --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
              --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
              --pull \
              --tag cda:scan \
              --file Dockerfile .

jobs:
  test:
    docker:
      - image: cimg/ruby:3.4.4
        environment:
          PAGER: cat
          DATABASE_URL: postgres://postgres@localhost/laa_court_data_adaptor_test
          RAILS_ENV: test
      - image: cimg/postgres:17.4
        environment:
          POSTGRES_DB: laa_court_data_adaptor_test
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install bundle
          command: |
            sudo gem install bundler -N

      - run:
          name: install dependencies
          command: |
            bundle check || bundle install --jobs=4 --retry=3

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: 'Install postgres client 17'
          command: |
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            sudo apt-get update
            sudo apt-get install postgresql-client-17

      - run:
          name: Database Setup
          command: |
            bundle exec rake db:migrate

      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - run:
          name: run rubocop
          command: bundle exec rubocop

  build-and-push-app:
    executor: aws-ecr/default
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run:
          name: Set env vars
          command: |
            [[ "$CIRCLE_BRANCH" == "main" ]] && ECR_TAGS="$CIRCLE_SHA1,latest" || ECR_TAGS="$CIRCLE_SHA1"
            echo "export ECR_TAGS=$ECR_TAGS" >> "$BASH_ENV"
            echo "export APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)"  >> "$BASH_ENV"
            source "$BASH_ENV"
      - aws-ecr/build_image:
          push_image: true
          tag: ${ECR_TAGS}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
          account_id: "754256621582"
          extra_build_args: >-
            --build-arg BUILD_DATE=${APP_BUILD_DATE}
            --build-arg BUILD_TAG=${CIRCLE_SHA1}
            --build-arg COMMIT_ID=${CIRCLE_SHA1}
            --build-arg APP_BRANCH=${CIRCLE_BRANCH}

  install_on_dev_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_DEV_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-dev
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-dev get pods
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-dev
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/public-values/dev.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_test_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_TEST_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-test
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-test get pods
      - helm/upgrade-helm-chart:
          namespace: laa-court-data-adaptor-test
          update-repositories: false
          chart: ./helm_deploy/laa-court-data-adaptor
          release-name: laa-court-data-adaptor
          values: ./helm_deploy/laa-court-data-adaptor/public-values/test.yaml
          values-to-override: image.tag=$CIRCLE_SHA1

  install_on_uat_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_UAT_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-uat
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-uat get pods
      - run:
          name: Deploy to UAT
          command: |
            .circleci/deploy.sh laa-court-data-adaptor-uat ./helm_deploy/laa-court-data-adaptor/public-values/uat.yaml $CIRCLE_SHA1

  install_on_prod_live:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_PROD_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=laa-court-data-adaptor-prod
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=laa-court-data-adaptor-prod get pods
      - run:
          name: Deploy to Production
          command: |
            .circleci/deploy.sh laa-court-data-adaptor-prod ./helm_deploy/laa-court-data-adaptor/live/prod/values-prod.yaml $CIRCLE_SHA1


  postman_test_on_dev:
    executor: newman-latest
    steps:
      - run:
          name: Install Git (for local use)
          command: |
            apk update && apk add git
      - run:
          name: Upgrade Newman to Latest
          command: |
            newman --version
      - checkout
      - newman/newman-run:
          collection: ./postman-collection/runner/tests.postman_collection.json
          environment: ./postman-collection/runner/enviroments/dev.postman_environment.json
          delay-request: "3000"
          additional-options:  "--env-var client_id=$DEV_UID --env-var client_secret=$DEV_SECRET"

  scan-docker-image:
    parameters:
      monitor:
        type: boolean
        default: false
    executor: snyk-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - build-temp-image
      - snyk/scan:
          token-variable: SNYK_TOKEN
          docker-image-name: cda:scan
          target-file: ./Dockerfile
          organization: "legal-aid-agency"
          severity-threshold: "critical"
          fail-on-issues: true
          no-output-timeout: 20m
          monitor-on-build: << parameters.monitor >>

workflows:
  version: 2
  test-build-deploy-main-to-live-cluster:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
      - build-and-push-app:
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - scan-docker-image:
          name: scan-and-monitor-docker-image
          monitor: true
          requires:
          - build-and-push-app
      - install_on_dev_live:
          requires:
            - build-and-push-app
      - install_on_test_live:
          requires:
          - build-and-push-app
      - install_on_uat_live:
          requires:
          - build-and-push-app
      - hold_install_on_prod:
          type: approval
          requires:
            - build-and-push-app
      - install_on_prod_live:
          requires:
          - hold_install_on_prod


  test-branch:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - main

  build-deploy-branch-to-live-cluster:
    jobs:
      - build-and-push-app:
          filters:
            branches:
              ignore:
                - main
      - scan-docker-image:
          name: scan-docker-image
          monitor: false
          requires:
          - build-and-push-app
      - hold_install_on_dev:
          type: approval
          requires:
          - build-and-push-app
      - install_on_dev_live:
          requires:
          - hold_install_on_dev
      - hold_install_on_test:
          type: approval
          requires:
          - build-and-push-app
      - install_on_test_live:
          requires:
          - hold_install_on_test
      - hold_install_on_uat:
          type: approval
          requires:
          - build-and-push-app
      - install_on_uat_live:
          requires:
          - hold_install_on_uat
      - postman_test_on_dev:
          requires:
          - install_on_dev_live
